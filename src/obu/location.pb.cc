// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: location.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "location.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gps2Package {

namespace {

const ::google::protobuf::Descriptor* BaseMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BaseMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* LocationPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocationPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* RtcmDataPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtcmDataPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* AlignDataPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AlignDataPB_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_location_2eproto() {
  protobuf_AddDesc_location_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "location.proto");
  GOOGLE_CHECK(file != NULL);
  BaseMsg_descriptor_ = file->message_type(0);
  static const int BaseMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseMsg, msg_type_),
  };
  BaseMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BaseMsg_descriptor_,
      BaseMsg::default_instance_,
      BaseMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BaseMsg));
  LocationPB_descriptor_ = file->message_type(1);
  static const int LocationPB_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationPB, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationPB, secmark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationPB, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationPB, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationPB, elev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationPB, accuracy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationPB, heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationPB, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationPB, num_st_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationPB, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationPB, acc_),
  };
  LocationPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LocationPB_descriptor_,
      LocationPB::default_instance_,
      LocationPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LocationPB));
  RtcmDataPB_descriptor_ = file->message_type(2);
  static const int RtcmDataPB_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtcmDataPB, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtcmDataPB, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtcmDataPB, buf_),
  };
  RtcmDataPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtcmDataPB_descriptor_,
      RtcmDataPB::default_instance_,
      RtcmDataPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtcmDataPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtcmDataPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtcmDataPB));
  AlignDataPB_descriptor_ = file->message_type(3);
  static const int AlignDataPB_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlignDataPB, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlignDataPB, pos_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlignDataPB, east_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlignDataPB, north_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlignDataPB, up_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlignDataPB, master_id_),
  };
  AlignDataPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AlignDataPB_descriptor_,
      AlignDataPB::default_instance_,
      AlignDataPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlignDataPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlignDataPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AlignDataPB));
  MsgType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_location_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BaseMsg_descriptor_, &BaseMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LocationPB_descriptor_, &LocationPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtcmDataPB_descriptor_, &RtcmDataPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AlignDataPB_descriptor_, &AlignDataPB::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_location_2eproto() {
  delete BaseMsg::default_instance_;
  delete BaseMsg_reflection_;
  delete LocationPB::default_instance_;
  delete LocationPB_reflection_;
  delete RtcmDataPB::default_instance_;
  delete RtcmDataPB_reflection_;
  delete AlignDataPB::default_instance_;
  delete AlignDataPB_reflection_;
}

void protobuf_AddDesc_location_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016location.proto\022\013gps2Package\"1\n\007BaseMsg"
    "\022&\n\010msg_type\030\001 \002(\0162\024.gps2Package.MsgType"
    "\"\326\001\n\nLocationPB\022&\n\010msg_type\030\001 \002(\0162\024.gps2"
    "Package.MsgType\022\017\n\007secmark\030\002 \002(\005\022\020\n\010lati"
    "tude\030\003 \002(\005\022\021\n\tlongitude\030\004 \002(\005\022\014\n\004elev\030\005 "
    "\002(\005\022\020\n\010accuracy\030\006 \002(\005\022\017\n\007heading\030\007 \002(\005\022\r"
    "\n\005speed\030\010 \002(\005\022\016\n\006num_st\030\t \002(\005\022\r\n\005model\030\n"
    " \002(\005\022\013\n\003acc\030\013 \002(\005\"O\n\nRtcmDataPB\022&\n\010msg_t"
    "ype\030\001 \002(\0162\024.gps2Package.MsgType\022\014\n\004size\030"
    "\002 \002(\005\022\013\n\003buf\030\003 \002(\014\"\203\001\n\013AlignDataPB\022&\n\010ms"
    "g_type\030\001 \002(\0162\024.gps2Package.MsgType\022\020\n\010po"
    "s_type\030\002 \002(\005\022\014\n\004east\030\003 \002(\005\022\r\n\005north\030\004 \002("
    "\005\022\n\n\002up\030\005 \002(\005\022\021\n\tmaster_id\030\006 \002(\005*C\n\007MsgT"
    "ype\022\023\n\017LocationMsgType\020\000\022\020\n\014RtcmDataType"
    "\020\001\022\021\n\rAlignDataType\020\002", 581);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "location.proto", &protobuf_RegisterTypes);
  BaseMsg::default_instance_ = new BaseMsg();
  LocationPB::default_instance_ = new LocationPB();
  RtcmDataPB::default_instance_ = new RtcmDataPB();
  AlignDataPB::default_instance_ = new AlignDataPB();
  BaseMsg::default_instance_->InitAsDefaultInstance();
  LocationPB::default_instance_->InitAsDefaultInstance();
  RtcmDataPB::default_instance_->InitAsDefaultInstance();
  AlignDataPB::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_location_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_location_2eproto {
  StaticDescriptorInitializer_location_2eproto() {
    protobuf_AddDesc_location_2eproto();
  }
} static_descriptor_initializer_location_2eproto_;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgType_descriptor_;
}
bool MsgType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int BaseMsg::kMsgTypeFieldNumber;
#endif  // !_MSC_VER

BaseMsg::BaseMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gps2Package.BaseMsg)
}

void BaseMsg::InitAsDefaultInstance() {
}

BaseMsg::BaseMsg(const BaseMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gps2Package.BaseMsg)
}

void BaseMsg::SharedCtor() {
  _cached_size_ = 0;
  msg_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BaseMsg::~BaseMsg() {
  // @@protoc_insertion_point(destructor:gps2Package.BaseMsg)
  SharedDtor();
}

void BaseMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BaseMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaseMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaseMsg_descriptor_;
}

const BaseMsg& BaseMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_location_2eproto();
  return *default_instance_;
}

BaseMsg* BaseMsg::default_instance_ = NULL;

BaseMsg* BaseMsg::New() const {
  return new BaseMsg;
}

void BaseMsg::Clear() {
  msg_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BaseMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gps2Package.BaseMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gps2Package.MsgType msg_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gps2Package::MsgType_IsValid(value)) {
            set_msg_type(static_cast< ::gps2Package::MsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gps2Package.BaseMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gps2Package.BaseMsg)
  return false;
#undef DO_
}

void BaseMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gps2Package.BaseMsg)
  // required .gps2Package.MsgType msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gps2Package.BaseMsg)
}

::google::protobuf::uint8* BaseMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gps2Package.BaseMsg)
  // required .gps2Package.MsgType msg_type = 1;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gps2Package.BaseMsg)
  return target;
}

int BaseMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gps2Package.MsgType msg_type = 1;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BaseMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BaseMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BaseMsg::MergeFrom(const BaseMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BaseMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseMsg::CopyFrom(const BaseMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BaseMsg::Swap(BaseMsg* other) {
  if (other != this) {
    std::swap(msg_type_, other->msg_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BaseMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BaseMsg_descriptor_;
  metadata.reflection = BaseMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LocationPB::kMsgTypeFieldNumber;
const int LocationPB::kSecmarkFieldNumber;
const int LocationPB::kLatitudeFieldNumber;
const int LocationPB::kLongitudeFieldNumber;
const int LocationPB::kElevFieldNumber;
const int LocationPB::kAccuracyFieldNumber;
const int LocationPB::kHeadingFieldNumber;
const int LocationPB::kSpeedFieldNumber;
const int LocationPB::kNumStFieldNumber;
const int LocationPB::kModelFieldNumber;
const int LocationPB::kAccFieldNumber;
#endif  // !_MSC_VER

LocationPB::LocationPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gps2Package.LocationPB)
}

void LocationPB::InitAsDefaultInstance() {
}

LocationPB::LocationPB(const LocationPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gps2Package.LocationPB)
}

void LocationPB::SharedCtor() {
  _cached_size_ = 0;
  msg_type_ = 0;
  secmark_ = 0;
  latitude_ = 0;
  longitude_ = 0;
  elev_ = 0;
  accuracy_ = 0;
  heading_ = 0;
  speed_ = 0;
  num_st_ = 0;
  model_ = 0;
  acc_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocationPB::~LocationPB() {
  // @@protoc_insertion_point(destructor:gps2Package.LocationPB)
  SharedDtor();
}

void LocationPB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LocationPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocationPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocationPB_descriptor_;
}

const LocationPB& LocationPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_location_2eproto();
  return *default_instance_;
}

LocationPB* LocationPB::default_instance_ = NULL;

LocationPB* LocationPB::New() const {
  return new LocationPB;
}

void LocationPB::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LocationPB*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(msg_type_, speed_);
  }
  ZR_(num_st_, acc_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LocationPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gps2Package.LocationPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gps2Package.MsgType msg_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gps2Package::MsgType_IsValid(value)) {
            set_msg_type(static_cast< ::gps2Package::MsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_secmark;
        break;
      }

      // required int32 secmark = 2;
      case 2: {
        if (tag == 16) {
         parse_secmark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &secmark_)));
          set_has_secmark();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_latitude;
        break;
      }

      // required int32 latitude = 3;
      case 3: {
        if (tag == 24) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_longitude;
        break;
      }

      // required int32 longitude = 4;
      case 4: {
        if (tag == 32) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_elev;
        break;
      }

      // required int32 elev = 5;
      case 5: {
        if (tag == 40) {
         parse_elev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &elev_)));
          set_has_elev();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_accuracy;
        break;
      }

      // required int32 accuracy = 6;
      case 6: {
        if (tag == 48) {
         parse_accuracy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accuracy_)));
          set_has_accuracy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_heading;
        break;
      }

      // required int32 heading = 7;
      case 7: {
        if (tag == 56) {
         parse_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &heading_)));
          set_has_heading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_speed;
        break;
      }

      // required int32 speed = 8;
      case 8: {
        if (tag == 64) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_num_st;
        break;
      }

      // required int32 num_st = 9;
      case 9: {
        if (tag == 72) {
         parse_num_st:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_st_)));
          set_has_num_st();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_model;
        break;
      }

      // required int32 model = 10;
      case 10: {
        if (tag == 80) {
         parse_model:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &model_)));
          set_has_model();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_acc;
        break;
      }

      // required int32 acc = 11;
      case 11: {
        if (tag == 88) {
         parse_acc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &acc_)));
          set_has_acc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gps2Package.LocationPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gps2Package.LocationPB)
  return false;
#undef DO_
}

void LocationPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gps2Package.LocationPB)
  // required .gps2Package.MsgType msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_type(), output);
  }

  // required int32 secmark = 2;
  if (has_secmark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->secmark(), output);
  }

  // required int32 latitude = 3;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->latitude(), output);
  }

  // required int32 longitude = 4;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->longitude(), output);
  }

  // required int32 elev = 5;
  if (has_elev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->elev(), output);
  }

  // required int32 accuracy = 6;
  if (has_accuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->accuracy(), output);
  }

  // required int32 heading = 7;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->heading(), output);
  }

  // required int32 speed = 8;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->speed(), output);
  }

  // required int32 num_st = 9;
  if (has_num_st()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->num_st(), output);
  }

  // required int32 model = 10;
  if (has_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->model(), output);
  }

  // required int32 acc = 11;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->acc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gps2Package.LocationPB)
}

::google::protobuf::uint8* LocationPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gps2Package.LocationPB)
  // required .gps2Package.MsgType msg_type = 1;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_type(), target);
  }

  // required int32 secmark = 2;
  if (has_secmark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->secmark(), target);
  }

  // required int32 latitude = 3;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->latitude(), target);
  }

  // required int32 longitude = 4;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->longitude(), target);
  }

  // required int32 elev = 5;
  if (has_elev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->elev(), target);
  }

  // required int32 accuracy = 6;
  if (has_accuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->accuracy(), target);
  }

  // required int32 heading = 7;
  if (has_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->heading(), target);
  }

  // required int32 speed = 8;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->speed(), target);
  }

  // required int32 num_st = 9;
  if (has_num_st()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->num_st(), target);
  }

  // required int32 model = 10;
  if (has_model()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->model(), target);
  }

  // required int32 acc = 11;
  if (has_acc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->acc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gps2Package.LocationPB)
  return target;
}

int LocationPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gps2Package.MsgType msg_type = 1;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
    }

    // required int32 secmark = 2;
    if (has_secmark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->secmark());
    }

    // required int32 latitude = 3;
    if (has_latitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->latitude());
    }

    // required int32 longitude = 4;
    if (has_longitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->longitude());
    }

    // required int32 elev = 5;
    if (has_elev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->elev());
    }

    // required int32 accuracy = 6;
    if (has_accuracy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accuracy());
    }

    // required int32 heading = 7;
    if (has_heading()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->heading());
    }

    // required int32 speed = 8;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speed());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 num_st = 9;
    if (has_num_st()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_st());
    }

    // required int32 model = 10;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->model());
    }

    // required int32 acc = 11;
    if (has_acc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->acc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocationPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LocationPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LocationPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LocationPB::MergeFrom(const LocationPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_secmark()) {
      set_secmark(from.secmark());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_elev()) {
      set_elev(from.elev());
    }
    if (from.has_accuracy()) {
      set_accuracy(from.accuracy());
    }
    if (from.has_heading()) {
      set_heading(from.heading());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_num_st()) {
      set_num_st(from.num_st());
    }
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_acc()) {
      set_acc(from.acc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LocationPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocationPB::CopyFrom(const LocationPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  return true;
}

void LocationPB::Swap(LocationPB* other) {
  if (other != this) {
    std::swap(msg_type_, other->msg_type_);
    std::swap(secmark_, other->secmark_);
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(elev_, other->elev_);
    std::swap(accuracy_, other->accuracy_);
    std::swap(heading_, other->heading_);
    std::swap(speed_, other->speed_);
    std::swap(num_st_, other->num_st_);
    std::swap(model_, other->model_);
    std::swap(acc_, other->acc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LocationPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocationPB_descriptor_;
  metadata.reflection = LocationPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RtcmDataPB::kMsgTypeFieldNumber;
const int RtcmDataPB::kSizeFieldNumber;
const int RtcmDataPB::kBufFieldNumber;
#endif  // !_MSC_VER

RtcmDataPB::RtcmDataPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gps2Package.RtcmDataPB)
}

void RtcmDataPB::InitAsDefaultInstance() {
}

RtcmDataPB::RtcmDataPB(const RtcmDataPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gps2Package.RtcmDataPB)
}

void RtcmDataPB::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msg_type_ = 0;
  size_ = 0;
  buf_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtcmDataPB::~RtcmDataPB() {
  // @@protoc_insertion_point(destructor:gps2Package.RtcmDataPB)
  SharedDtor();
}

void RtcmDataPB::SharedDtor() {
  if (buf_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete buf_;
  }
  if (this != default_instance_) {
  }
}

void RtcmDataPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtcmDataPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtcmDataPB_descriptor_;
}

const RtcmDataPB& RtcmDataPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_location_2eproto();
  return *default_instance_;
}

RtcmDataPB* RtcmDataPB::default_instance_ = NULL;

RtcmDataPB* RtcmDataPB::New() const {
  return new RtcmDataPB;
}

void RtcmDataPB::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RtcmDataPB*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(msg_type_, size_);
    if (has_buf()) {
      if (buf_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        buf_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtcmDataPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gps2Package.RtcmDataPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gps2Package.MsgType msg_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gps2Package::MsgType_IsValid(value)) {
            set_msg_type(static_cast< ::gps2Package::MsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // required int32 size = 2;
      case 2: {
        if (tag == 16) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_buf;
        break;
      }

      // required bytes buf = 3;
      case 3: {
        if (tag == 26) {
         parse_buf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gps2Package.RtcmDataPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gps2Package.RtcmDataPB)
  return false;
#undef DO_
}

void RtcmDataPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gps2Package.RtcmDataPB)
  // required .gps2Package.MsgType msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_type(), output);
  }

  // required int32 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->size(), output);
  }

  // required bytes buf = 3;
  if (has_buf()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->buf(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gps2Package.RtcmDataPB)
}

::google::protobuf::uint8* RtcmDataPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gps2Package.RtcmDataPB)
  // required .gps2Package.MsgType msg_type = 1;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_type(), target);
  }

  // required int32 size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->size(), target);
  }

  // required bytes buf = 3;
  if (has_buf()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->buf(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gps2Package.RtcmDataPB)
  return target;
}

int RtcmDataPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gps2Package.MsgType msg_type = 1;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
    }

    // required int32 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // required bytes buf = 3;
    if (has_buf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->buf());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtcmDataPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtcmDataPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtcmDataPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtcmDataPB::MergeFrom(const RtcmDataPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_buf()) {
      set_buf(from.buf());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtcmDataPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtcmDataPB::CopyFrom(const RtcmDataPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtcmDataPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RtcmDataPB::Swap(RtcmDataPB* other) {
  if (other != this) {
    std::swap(msg_type_, other->msg_type_);
    std::swap(size_, other->size_);
    std::swap(buf_, other->buf_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtcmDataPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtcmDataPB_descriptor_;
  metadata.reflection = RtcmDataPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AlignDataPB::kMsgTypeFieldNumber;
const int AlignDataPB::kPosTypeFieldNumber;
const int AlignDataPB::kEastFieldNumber;
const int AlignDataPB::kNorthFieldNumber;
const int AlignDataPB::kUpFieldNumber;
const int AlignDataPB::kMasterIdFieldNumber;
#endif  // !_MSC_VER

AlignDataPB::AlignDataPB()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gps2Package.AlignDataPB)
}

void AlignDataPB::InitAsDefaultInstance() {
}

AlignDataPB::AlignDataPB(const AlignDataPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gps2Package.AlignDataPB)
}

void AlignDataPB::SharedCtor() {
  _cached_size_ = 0;
  msg_type_ = 0;
  pos_type_ = 0;
  east_ = 0;
  north_ = 0;
  up_ = 0;
  master_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AlignDataPB::~AlignDataPB() {
  // @@protoc_insertion_point(destructor:gps2Package.AlignDataPB)
  SharedDtor();
}

void AlignDataPB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AlignDataPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlignDataPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlignDataPB_descriptor_;
}

const AlignDataPB& AlignDataPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_location_2eproto();
  return *default_instance_;
}

AlignDataPB* AlignDataPB::default_instance_ = NULL;

AlignDataPB* AlignDataPB::New() const {
  return new AlignDataPB;
}

void AlignDataPB::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AlignDataPB*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(msg_type_, master_id_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AlignDataPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gps2Package.AlignDataPB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gps2Package.MsgType msg_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gps2Package::MsgType_IsValid(value)) {
            set_msg_type(static_cast< ::gps2Package::MsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pos_type;
        break;
      }

      // required int32 pos_type = 2;
      case 2: {
        if (tag == 16) {
         parse_pos_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_type_)));
          set_has_pos_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_east;
        break;
      }

      // required int32 east = 3;
      case 3: {
        if (tag == 24) {
         parse_east:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &east_)));
          set_has_east();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_north;
        break;
      }

      // required int32 north = 4;
      case 4: {
        if (tag == 32) {
         parse_north:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &north_)));
          set_has_north();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_up;
        break;
      }

      // required int32 up = 5;
      case 5: {
        if (tag == 40) {
         parse_up:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &up_)));
          set_has_up();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_master_id;
        break;
      }

      // required int32 master_id = 6;
      case 6: {
        if (tag == 48) {
         parse_master_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &master_id_)));
          set_has_master_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gps2Package.AlignDataPB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gps2Package.AlignDataPB)
  return false;
#undef DO_
}

void AlignDataPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gps2Package.AlignDataPB)
  // required .gps2Package.MsgType msg_type = 1;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_type(), output);
  }

  // required int32 pos_type = 2;
  if (has_pos_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos_type(), output);
  }

  // required int32 east = 3;
  if (has_east()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->east(), output);
  }

  // required int32 north = 4;
  if (has_north()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->north(), output);
  }

  // required int32 up = 5;
  if (has_up()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->up(), output);
  }

  // required int32 master_id = 6;
  if (has_master_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->master_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gps2Package.AlignDataPB)
}

::google::protobuf::uint8* AlignDataPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gps2Package.AlignDataPB)
  // required .gps2Package.MsgType msg_type = 1;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_type(), target);
  }

  // required int32 pos_type = 2;
  if (has_pos_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos_type(), target);
  }

  // required int32 east = 3;
  if (has_east()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->east(), target);
  }

  // required int32 north = 4;
  if (has_north()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->north(), target);
  }

  // required int32 up = 5;
  if (has_up()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->up(), target);
  }

  // required int32 master_id = 6;
  if (has_master_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->master_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gps2Package.AlignDataPB)
  return target;
}

int AlignDataPB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gps2Package.MsgType msg_type = 1;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
    }

    // required int32 pos_type = 2;
    if (has_pos_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_type());
    }

    // required int32 east = 3;
    if (has_east()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->east());
    }

    // required int32 north = 4;
    if (has_north()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->north());
    }

    // required int32 up = 5;
    if (has_up()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->up());
    }

    // required int32 master_id = 6;
    if (has_master_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->master_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlignDataPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AlignDataPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AlignDataPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AlignDataPB::MergeFrom(const AlignDataPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_pos_type()) {
      set_pos_type(from.pos_type());
    }
    if (from.has_east()) {
      set_east(from.east());
    }
    if (from.has_north()) {
      set_north(from.north());
    }
    if (from.has_up()) {
      set_up(from.up());
    }
    if (from.has_master_id()) {
      set_master_id(from.master_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AlignDataPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlignDataPB::CopyFrom(const AlignDataPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlignDataPB::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void AlignDataPB::Swap(AlignDataPB* other) {
  if (other != this) {
    std::swap(msg_type_, other->msg_type_);
    std::swap(pos_type_, other->pos_type_);
    std::swap(east_, other->east_);
    std::swap(north_, other->north_);
    std::swap(up_, other->up_);
    std::swap(master_id_, other->master_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AlignDataPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AlignDataPB_descriptor_;
  metadata.reflection = AlignDataPB_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gps2Package

// @@protoc_insertion_point(global_scope)
